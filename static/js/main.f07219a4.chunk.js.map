{"version":3,"sources":["components/CounterSettings/CounterSettings.module.css","components/Display/Display.tsx","components/Button/Button.tsx","components/Counter/Counter.tsx","components/CounterSettings/CounterSettings.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Display","props","displayStyle","color","counter","maxValue","style","Button","className","disabled","onClick","title","Counter","setCounter","startValue","CounterSettings","inputStartValueClass","input","error","inputMaxValueClass","settingsWrapper","displaySettings","type","value","onChange","e","changeStartValue","Number","target","changeMaxValue","button","changeValuesForCounter","App","console","log","useState","setStartValue","setMaxValue","useEffect","localStartValue","localStorage","getItem","localMaxValue","JSON","parse","setItem","stringify","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f07219a4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingsWrapper\":\"CounterSettings_settingsWrapper__1jUQU\",\"button\":\"CounterSettings_button__1kxV_\",\"displaySettings\":\"CounterSettings_displaySettings__2P4s0\",\"input\":\"CounterSettings_input__2UrqR\",\"error\":\"CounterSettings_error__1IFNp\"};","import React from 'react';\n\ntype DisplayPropsType = {\n    counter: number\n    maxValue: number\n}\n\nfunction Display(props: DisplayPropsType) {\n    let displayStyle = {\n        color: props.counter < props.maxValue ? 'black' : 'red',\n    }\n\n    return (\n        <div style={displayStyle}>\n            {props.counter}\n        </div>\n    )\n}\n\nexport default Display;\n","import React from 'react';\nimport './Button.css';\n\ntype ButtonPropsType = {\n    onClick: () => void\n    title: 'inc' | 'reset' | 'set'\n    maxValue: number\n    startValue: number\n    disabled: boolean\n}\n\nfunction Button(props: ButtonPropsType) {\n\n    return (\n        <span>\n            <button className='button'\n                    disabled={props.disabled}\n                    onClick={props.onClick}>\n                {props.title}\n            </button>\n        </span>\n    )\n}\n\nexport default Button;","import React from 'react';\nimport Display from '../Display/Display';\nimport Button from '../Button/Button';\nimport './Counter.css';\n\ntype CounterPropsType = {\n    startValue: number\n    maxValue: number\n    counter: number\n    setCounter: (value: number) => void\n}\n\nfunction Counter(props: CounterPropsType) {\n\n    const increment = () => {\n        if (props.counter < props.maxValue) {\n            props.setCounter(props.counter + 1);\n        }\n    }\n\n    const reset = () => {\n        props.setCounter(props.startValue);\n    }\n\n    return (\n        <div className='counterWrapper'>\n            <div className='display'>\n                <Display counter={props.counter} maxValue={props.maxValue}/>\n            </div>\n            <div className='buttons'>\n                <Button disabled={props.counter === props.maxValue} onClick={increment}\n                        title='inc' maxValue={props.maxValue} startValue={props.startValue}/>\n                <Button disabled={props.counter === props.startValue} onClick={reset}\n                        title='reset' maxValue={props.maxValue} startValue={props.startValue}/>\n            </div>\n        </div>\n    );\n}\n\nexport default Counter;\n","import React from 'react';\nimport Button from \"../Button/Button\";\nimport style from './CounterSettings.module.css'\n\ntype SettingsCounterPropsType = {\n    startValue: number\n    maxValue: number\n    changeStartValue: (startValue: number) => void\n    changeMaxValue: (maxValue: number) => void\n    disabled: boolean\n    changeValuesForCounter: () => void\n}\n\nfunction CounterSettings(props: SettingsCounterPropsType) {\n\n    const inputStartValueClass = ` ${style.input} ${props.startValue < 0 || props.startValue === props.maxValue ? style.error : ''} `\n    const inputMaxValueClass = ` ${style.input} ${props.maxValue <= props.startValue ? style.error : ''} `\n\n    return (\n        <div className={style.settingsWrapper}>\n            <div className={style.displaySettings}>\n                <div>\n                    Start value: <input className={inputStartValueClass}\n                                        type='number' value={props.startValue}\n                                        onChange={(e) => props.changeStartValue(Number(e.target.value))}/>\n                </div>\n                <div>\n                    Max value: <input\n                    className={inputMaxValueClass}\n                    type='number' value={props.maxValue}\n                    onChange={(e) => {\n                        props.changeMaxValue(Number(e.target.value))\n                    }}/>\n                </div>\n            </div>\n            <div className={style.button}>\n                <Button onClick={props.changeValuesForCounter} title='set' startValue={props.startValue}\n                        maxValue={props.maxValue} disabled={props.disabled}/>\n            </div>\n        </div>\n    );\n}\n\n\nexport default CounterSettings","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport Counter from './components/Counter/Counter';\nimport CounterSettings from \"./components/CounterSettings/CounterSettings\";\n\n/*\ntype StateType = {\n    startValue: number\n    maxValue: number\n    counter: number\n    disabledBtnSet: boolean\n    disabledBtnInc: boolean\n    disabledBtnReset: boolean\n}\n\ntype ActionsType =\n\nconst reducer = (state: StateType, action) => {\n\n}\n*/\n\nfunction App() {\n    console.log('App rendering')\n\n    const [startValue, setStartValue] = useState<number>(0)\n    const [maxValue, setMaxValue] = useState<number>(5)\n    const [counter, setCounter] = useState<number>(startValue)\n\n    useEffect(() => {\n        const localStartValue = localStorage.getItem('startValue')\n        const localMaxValue = localStorage.getItem('maxValue')\n        if (localStartValue) setStartValue(JSON.parse(localStartValue))\n        if (localMaxValue) setMaxValue(JSON.parse(localMaxValue))\n    }, [])\n\n    useEffect(() => {\n        localStorage.setItem('startValue', JSON.stringify(startValue))\n        localStorage.setItem('maxValue', JSON.stringify(maxValue))\n    })\n\n    const changeStartValue = (value: number) => {\n        setStartValue(value)\n    }\n\n    const changeMaxValue = (value: number) => {\n        setMaxValue(value)\n    }\n\n    const changeValuesForCounter = () => {\n        setStartValue(startValue)\n        setMaxValue(maxValue)\n        setCounter(startValue)\n    }\n\n    return (\n        <div className=\"App-header\">\n            <Counter maxValue={maxValue} startValue={startValue} counter={counter} setCounter={setCounter}/>\n\n            <CounterSettings maxValue={maxValue} startValue={startValue}\n                             disabled={startValue < 0 || startValue >= maxValue}\n                             changeStartValue={changeStartValue} changeMaxValue={changeMaxValue}\n                             changeValuesForCounter={changeValuesForCounter}/>\n        </div>\n    );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}