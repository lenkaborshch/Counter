{"version":3,"sources":["components/CounterWithOneScreen/CounterWithOneScreen.module.css","components/CounterSettings/DisplaySettings/DisplaySettings.module.css","components/Counter/Counter.module.css","components/CounterSettings/CounterSettings.module.css","components/Button/Button.module.css","components/Counter/Display/Display.tsx","components/Button/Button.tsx","components/Counter/Counter.tsx","components/CounterSettings/DisplaySettings/DisplaySettings.tsx","components/CounterSettings/CounterSettings.tsx","App.tsx","serviceWorker.ts","components/CounterWithOneScreen/CounterWithOneScreen.tsx","index.tsx"],"names":["module","exports","Display","props","errorInEnteredData","startValue","maxValue","displayStyle","color","counter","fontSize","isDataEntered","style","Button","className","button","disabled","onClick","title","Counter","counterWrapper","display","buttonsField","setCounter","DisplaySettings","inputStartValueClass","input","error","inputMaxValueClass","type","value","onChange","e","changeStartValue","Number","target","changeMaxValue","CounterSettings","settingsWrapper","displaySettings","onButtonSetClick","App","useState","setStartValue","setMaxValue","disabledBtnSet","setDisabledBtnSet","disabledBtnsCounter","setdDisabledBtnsCounter","setIsDataEntered","useEffect","localStartValue","localStorage","getItem","localMaxValue","JSON","parse","setItem","stringify","Boolean","window","location","hostname","match","CounterWithOneScreen","showCounterScreen","setShowCounterScreen","screenWrapper","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.9c3f070b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"screenWrapper\":\"CounterWithOneScreen_screenWrapper__2dwBn\",\"display\":\"CounterWithOneScreen_display__1-Gdg\",\"buttonsField\":\"CounterWithOneScreen_buttonsField__Dkysg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"DisplaySettings_input__3NsW_\",\"error\":\"DisplaySettings_error__3zynp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterWrapper\":\"Counter_counterWrapper__2nWQq\",\"display\":\"Counter_display__2QKE7\",\"buttonsField\":\"Counter_buttonsField__-NSTr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingsWrapper\":\"CounterSettings_settingsWrapper__5pFIE\",\"displaySettings\":\"CounterSettings_displaySettings__3U8oO\",\"buttonsField\":\"CounterSettings_buttonsField__340t5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__1zNT5\"};","import React from 'react'\r\n\r\ntype DisplayPropsType = {\r\n    counter: number\r\n    startValue: number\r\n    maxValue: number\r\n    isDataEntered: boolean\r\n}\r\n\r\nexport function Display(props: DisplayPropsType) {\r\n\r\n    const errorInEnteredData = props.startValue < 0 || props.startValue >= props.maxValue\r\n\r\n    let displayStyle = {\r\n        color: props.counter === props.maxValue || errorInEnteredData ? 'red' : 'black',\r\n        fontSize: props.isDataEntered ? '50px' : '35px'\r\n    }\r\n\r\n    return (\r\n        <div style={displayStyle}>\r\n            {props.isDataEntered\r\n                ? props.counter\r\n                : errorInEnteredData ? 'Enter correct value' : 'Click set'}\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport style from './Button.module.css'\r\n\r\ntype ButtonPropsType = {\r\n    onClick: () => void\r\n    title: 'inc' | 'reset' | 'set'\r\n    maxValue: number\r\n    startValue: number\r\n    disabled: boolean\r\n}\r\n\r\nexport function Button(props: ButtonPropsType) {\r\n\r\n    return (\r\n        <span>\r\n            <button className={style.button}\r\n                    disabled={props.disabled}\r\n                    onClick={props.onClick}>\r\n                {props.title}\r\n            </button>\r\n        </span>\r\n    )\r\n}","import React from 'react'\r\nimport {Display} from './Display/Display'\r\nimport {Button} from '../Button/Button'\r\nimport style from './Counter.module.css'\r\n\r\ntype CounterPropsType = {\r\n    startValue: number\r\n    maxValue: number\r\n    counter: number\r\n    setCounter: (value: number) => void\r\n    disabled: boolean\r\n    isDataEntered: boolean\r\n}\r\n\r\nexport function Counter(props: CounterPropsType) {\r\n\r\n    const increment = () => {\r\n        if (props.counter < props.maxValue) {\r\n            props.setCounter(props.counter + 1)\r\n        }\r\n    }\r\n\r\n    const reset = () => {\r\n        props.setCounter(props.startValue)\r\n    }\r\n\r\n    return (\r\n        <div className={style.counterWrapper}>\r\n            <div className={style.display}>\r\n                <Display counter={props.counter} isDataEntered={props.isDataEntered}\r\n                         startValue={props.startValue} maxValue={props.maxValue}/>\r\n            </div>\r\n            <div className={style.buttonsField}>\r\n                <Button disabled={props.counter === props.maxValue || props.disabled} onClick={increment}\r\n                        title='inc' maxValue={props.maxValue} startValue={props.startValue}/>\r\n                <Button disabled={props.counter === props.startValue || props.disabled} onClick={reset}\r\n                        title='reset' maxValue={props.maxValue} startValue={props.startValue}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent} from 'react'\r\nimport style from './DisplaySettings.module.css'\r\n\r\ntype SettingsCounterPropsType = {\r\n    startValue: number\r\n    maxValue: number\r\n    changeStartValue: (startValue: number) => void\r\n    changeMaxValue: (maxValue: number) => void\r\n}\r\n\r\nexport function DisplaySettings(props: SettingsCounterPropsType) {\r\n\r\n    const inputStartValueClass = ` ${style.input} ${props.startValue < 0 || props.startValue >= props.maxValue ? style.error : ''} `\r\n    const inputMaxValueClass = ` ${style.input} ${props.maxValue <= props.startValue ? style.error : ''} `\r\n\r\n    const onChangeStartValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeStartValue(Number(e.target.value))\r\n    }\r\n    const onChangeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeMaxValue(Number(e.target.value))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                Start value: <input className={inputStartValueClass}\r\n                                    type='number' value={props.startValue}\r\n                                    onChange={onChangeStartValue}/>\r\n            </div>\r\n            <div>\r\n                Max value: <input\r\n                className={inputMaxValueClass}\r\n                type='number' value={props.maxValue}\r\n                onChange={onChangeMaxValue}/>\r\n            </div>\r\n        </>\r\n    )\r\n}","import React from 'react'\r\nimport {Button} from '../Button/Button'\r\nimport style from './CounterSettings.module.css'\r\nimport {DisplaySettings} from './DisplaySettings/DisplaySettings'\r\n\r\ntype SettingsCounterPropsType = {\r\n    startValue: number\r\n    maxValue: number\r\n    changeStartValue: (startValue: number) => void\r\n    changeMaxValue: (maxValue: number) => void\r\n    disabled: boolean\r\n    onButtonSetClick: () => void\r\n}\r\n\r\nexport function CounterSettings(props: SettingsCounterPropsType) {\r\n\r\n    return (\r\n        <div className={style.settingsWrapper}>\r\n            <div className={style.displaySettings}>\r\n                <DisplaySettings maxValue={props.maxValue} startValue={props.startValue}\r\n                                 changeStartValue={props.changeStartValue} changeMaxValue={props.changeMaxValue}/>\r\n            </div>\r\n\r\n            <div className={style.buttonsField}>\r\n                <Button onClick={props.onButtonSetClick} title='set' startValue={props.startValue}\r\n                        maxValue={props.maxValue} disabled={props.disabled}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from 'react'\r\nimport './App.css'\r\nimport {Counter} from './components/Counter/Counter'\r\nimport {CounterSettings} from './components/CounterSettings/CounterSettings'\r\n\r\nexport function App() {\r\n\r\n    const [startValue, setStartValue] = useState<number>(0)\r\n    const [maxValue, setMaxValue] = useState<number>(5)\r\n    const [counter, setCounter] = useState<number>(startValue)\r\n    const [disabledBtnSet, setDisabledBtnSet] = useState<boolean>(true)\r\n    const [disabledBtnsCounter, setdDisabledBtnsCounter] = useState<boolean>(false)\r\n    const [isDataEntered, setIsDataEntered] = useState<boolean>(true)\r\n\r\n    useEffect(() => {\r\n        const localStartValue = localStorage.getItem('startValue')\r\n        const localMaxValue = localStorage.getItem('maxValue')\r\n        if (localStartValue) {\r\n            setStartValue(JSON.parse(localStartValue))\r\n            setCounter(JSON.parse(localStartValue))\r\n        }\r\n        if (localMaxValue) setMaxValue(JSON.parse(localMaxValue))\r\n    }, [])\r\n\r\n    const changeStartValue = (value: number) => {\r\n        setStartValue(value)\r\n        value < 0 || value >= maxValue ? setDisabledBtnSet(true) : setDisabledBtnSet(false)\r\n        setdDisabledBtnsCounter(true)\r\n        setIsDataEntered(false)\r\n    }\r\n\r\n    const changeMaxValue = (value: number) => {\r\n        setMaxValue(value)\r\n        startValue < 0 || startValue >= value ? setDisabledBtnSet(true) : setDisabledBtnSet(false)\r\n        setdDisabledBtnsCounter(true)\r\n        setIsDataEntered(false)\r\n    }\r\n\r\n    const onButtonSetClick = () => {\r\n        setStartValue(startValue)\r\n        setMaxValue(maxValue)\r\n        setCounter(startValue)\r\n        setDisabledBtnSet(true)\r\n        localStorage.setItem('startValue', JSON.stringify(startValue))\r\n        localStorage.setItem('maxValue', JSON.stringify(maxValue))\r\n        setdDisabledBtnsCounter(false)\r\n        setIsDataEntered(true)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className='screen'>\r\n                <Counter maxValue={maxValue} startValue={startValue}\r\n                         counter={counter} setCounter={setCounter}\r\n                         disabled={disabledBtnsCounter} isDataEntered={isDataEntered}/>\r\n            </div>\r\n\r\n            <div className='screen'>\r\n                <CounterSettings maxValue={maxValue} startValue={startValue}\r\n                                 disabled={disabledBtnSet}\r\n                                 changeStartValue={changeStartValue} changeMaxValue={changeMaxValue}\r\n                                 onButtonSetClick={onButtonSetClick}/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, {useEffect, useState} from 'react'\r\nimport {Button} from '../Button/Button'\r\nimport style from './CounterWithOneScreen.module.css'\r\nimport '../../App.css'\r\nimport {Display} from '../Counter/Display/Display'\r\nimport {DisplaySettings} from '../CounterSettings/DisplaySettings/DisplaySettings'\r\n\r\nexport function CounterWithOneScreen() {\r\n\r\n    const [startValue, setStartValue] = useState<number>(0)\r\n    const [maxValue, setMaxValue] = useState<number>(5)\r\n    const [counter, setCounter] = useState<number>(startValue)\r\n    const [disabledBtnSet, setDisabledBtnSet] = useState<boolean>(false)\r\n    const [disabledBtnsCounter, setdDisabledBtnsCounter] = useState<boolean>(false)\r\n    const [isDataEntered, setIsDataEntered] = useState<boolean>(true)\r\n    const [showCounterScreen, setShowCounterScreen] = useState<boolean>(true)\r\n\r\n    useEffect(() => {\r\n        const localStartValue = localStorage.getItem('startValueInCounterWithOneScreen')\r\n        const localMaxValue = localStorage.getItem('maxValueInCounterWithOneScreen')\r\n        if (localStartValue) {\r\n            setStartValue(JSON.parse(localStartValue))\r\n            setCounter(JSON.parse(localStartValue))\r\n        }\r\n        if (localMaxValue) setMaxValue(JSON.parse(localMaxValue))\r\n    }, [])\r\n\r\n    const changeStartValue = (value: number) => {\r\n        setStartValue(value)\r\n        value < 0 || value >= maxValue ? setDisabledBtnSet(true) : setDisabledBtnSet(false)\r\n        setdDisabledBtnsCounter(true)\r\n        setIsDataEntered(false)\r\n    }\r\n\r\n    const changeMaxValue = (value: number) => {\r\n        setMaxValue(value)\r\n        startValue < 0 || startValue >= value ? setDisabledBtnSet(true) : setDisabledBtnSet(false)\r\n        setdDisabledBtnsCounter(true)\r\n        setIsDataEntered(false)\r\n    }\r\n\r\n    const onButtonSetClick = () => {\r\n        setStartValue(startValue)\r\n        setMaxValue(maxValue)\r\n        setCounter(startValue)\r\n        localStorage.setItem('startValueInCounterWithOneScreen', JSON.stringify(startValue))\r\n        localStorage.setItem('maxValueInCounterWithOneScreen', JSON.stringify(maxValue))\r\n        setdDisabledBtnsCounter(false)\r\n        setIsDataEntered(true)\r\n        setShowCounterScreen(!showCounterScreen)\r\n    }\r\n\r\n    const increment = () => {\r\n        if (counter < maxValue) {\r\n            setCounter(counter + 1)\r\n        }\r\n    }\r\n\r\n    const reset = () => {\r\n        setCounter(startValue)\r\n    }\r\n\r\n    return (\r\n        <div className={style.screenWrapper}>\r\n            {\r\n                showCounterScreen\r\n                    ? <>\r\n                        <div className={style.display}>\r\n                            <Display counter={counter} isDataEntered={isDataEntered}\r\n                                     startValue={startValue} maxValue={maxValue}/>\r\n                        </div>\r\n                        <div className={style.buttonsField}>\r\n                            <Button disabled={counter === maxValue || disabledBtnsCounter} onClick={increment}\r\n                                    title='inc' maxValue={maxValue} startValue={startValue}/>\r\n                            <Button disabled={counter === startValue || disabledBtnsCounter} onClick={reset}\r\n                                    title='reset' maxValue={maxValue} startValue={startValue}/>\r\n                            <Button onClick={onButtonSetClick} startValue={startValue}\r\n                                    title='set' maxValue={maxValue} disabled={disabledBtnSet}/>\r\n                        </div>\r\n                    </>\r\n                    : <>\r\n                        <div className={style.display}>\r\n                            <DisplaySettings maxValue={maxValue} startValue={startValue}\r\n                                             changeStartValue={changeStartValue} changeMaxValue={changeMaxValue}/>\r\n                        </div>\r\n                        <div className={style.buttonsField}>\r\n                            <Button onClick={onButtonSetClick} startValue={startValue}\r\n                                    title='set' maxValue={maxValue} disabled={disabledBtnSet}/>\r\n                        </div>\r\n                    </>\r\n            }\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport {App} from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport {CounterWithOneScreen} from './components/CounterWithOneScreen/CounterWithOneScreen'\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <div className='wrapper'>\r\n            <CounterWithOneScreen/>\r\n            <App/>\r\n        </div>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()"],"sourceRoot":""}