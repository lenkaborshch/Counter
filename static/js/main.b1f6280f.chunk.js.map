{"version":3,"sources":["components/CounterSettings/CounterSettings.module.css","components/Display/Display.tsx","components/Button/Button.tsx","components/Counter/Counter.tsx","components/CounterSettings/CounterSettings.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Display","props","errorInEnteredData","startValue","maxValue","displayStyle","color","counter","fontSize","isDataEntered","style","Button","className","disabled","onClick","title","Counter","setCounter","CounterSettings","inputStartValueClass","input","error","inputMaxValueClass","settingsWrapper","displaySettings","type","value","onChange","e","changeStartValue","Number","target","changeMaxValue","button","onButtonSetClick","App","useState","setStartValue","setMaxValue","disabledBtnSet","setDisabledBtnSet","disabledBtnsCounter","setdDisabledBtnsCounter","setIsDataEntered","useEffect","localStartValue","localStorage","getItem","localMaxValue","JSON","parse","setItem","stringify","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.b1f6280f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingsWrapper\":\"CounterSettings_settingsWrapper__5pFIE\",\"button\":\"CounterSettings_button__11RU2\",\"displaySettings\":\"CounterSettings_displaySettings__3U8oO\",\"input\":\"CounterSettings_input__1REjI\",\"error\":\"CounterSettings_error__1dDtk\"};","import React from 'react'\r\n\r\ntype DisplayPropsType = {\r\n    counter: number\r\n    startValue: number\r\n    maxValue: number\r\n    isDataEntered: boolean\r\n}\r\n\r\nexport function Display(props: DisplayPropsType) {\r\n\r\n    const errorInEnteredData = props.startValue < 0 || props.startValue >= props.maxValue\r\n\r\n    let displayStyle = {\r\n        color: props.counter === props.maxValue || errorInEnteredData ? 'red' : 'black',\r\n        fontSize: props.isDataEntered ? '50px' : '35px'\r\n    }\r\n\r\n    return (\r\n        <div style={displayStyle}>\r\n            {props.isDataEntered\r\n                ? props.counter\r\n                : errorInEnteredData ? 'Enter correct value' : 'Click set'}\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport './Button.css'\r\n\r\ntype ButtonPropsType = {\r\n    onClick: () => void\r\n    title: 'inc' | 'reset' | 'set'\r\n    maxValue: number\r\n    startValue: number\r\n    disabled: boolean\r\n}\r\n\r\nexport function Button(props: ButtonPropsType) {\r\n\r\n    return (\r\n        <span>\r\n            <button className='button'\r\n                    disabled={props.disabled}\r\n                    onClick={props.onClick}>\r\n                {props.title}\r\n            </button>\r\n        </span>\r\n    )\r\n}","import React from 'react'\r\nimport {Display} from '../Display/Display'\r\nimport {Button} from '../Button/Button'\r\nimport './Counter.css'\r\n\r\ntype CounterPropsType = {\r\n    startValue: number\r\n    maxValue: number\r\n    counter: number\r\n    setCounter: (value: number) => void\r\n    disabled: boolean\r\n    isDataEntered: boolean\r\n}\r\n\r\nexport function Counter(props: CounterPropsType) {\r\n\r\n    const increment = () => {\r\n        if (props.counter < props.maxValue) {\r\n            props.setCounter(props.counter + 1);\r\n        }\r\n    }\r\n\r\n    const reset = () => {\r\n        props.setCounter(props.startValue);\r\n    }\r\n\r\n    return (\r\n        <div className='counterWrapper'>\r\n            <div className='display'>\r\n                <Display counter={props.counter} isDataEntered={props.isDataEntered}\r\n                         startValue={props.startValue} maxValue={props.maxValue}/>\r\n            </div>\r\n            <div className='buttons'>\r\n                <Button disabled={props.counter === props.maxValue || props.disabled} onClick={increment}\r\n                        title='inc' maxValue={props.maxValue} startValue={props.startValue}/>\r\n                <Button disabled={props.counter === props.startValue || props.disabled} onClick={reset}\r\n                        title='reset' maxValue={props.maxValue} startValue={props.startValue}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent} from 'react'\r\nimport {Button} from \"../Button/Button\"\r\nimport style from './CounterSettings.module.css'\r\n\r\ntype SettingsCounterPropsType = {\r\n    startValue: number\r\n    maxValue: number\r\n    changeStartValue: (startValue: number) => void\r\n    changeMaxValue: (maxValue: number) => void\r\n    disabled: boolean\r\n    onButtonSetClick: () => void\r\n}\r\n\r\nexport function CounterSettings(props: SettingsCounterPropsType) {\r\n\r\n    const inputStartValueClass = ` ${style.input} ${props.startValue < 0 || props.startValue >= props.maxValue ? style.error : ''} `\r\n    const inputMaxValueClass = ` ${style.input} ${props.maxValue <= props.startValue ? style.error : ''} `\r\n\r\n    const onChangeStartValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeStartValue(Number(e.target.value))\r\n    }\r\n    const onChangeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeMaxValue(Number(e.target.value))\r\n    }\r\n\r\n    return (\r\n        <div className={style.settingsWrapper}>\r\n            <div className={style.displaySettings}>\r\n                <div>\r\n                    Start value: <input className={inputStartValueClass}\r\n                                        type='number' value={props.startValue}\r\n                                        onChange={onChangeStartValue}/>\r\n                </div>\r\n                <div>\r\n                    Max value: <input\r\n                    className={inputMaxValueClass}\r\n                    type='number' value={props.maxValue}\r\n                    onChange={onChangeMaxValue}/>\r\n                </div>\r\n            </div>\r\n            <div className={style.button}>\r\n                <Button onClick={props.onButtonSetClick} title='set' startValue={props.startValue}\r\n                        maxValue={props.maxValue} disabled={props.disabled}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from 'react'\r\nimport './App.css'\r\nimport {Counter} from './components/Counter/Counter'\r\nimport {CounterSettings} from \"./components/CounterSettings/CounterSettings\"\r\n\r\nexport function App() {\r\n\r\n    const [startValue, setStartValue] = useState<number>(0)\r\n    const [maxValue, setMaxValue] = useState<number>(5)\r\n    const [counter, setCounter] = useState<number>(startValue)\r\n    const [disabledBtnSet, setDisabledBtnSet] = useState<boolean>(true)\r\n    const [disabledBtnsCounter, setdDisabledBtnsCounter] = useState<boolean>(false)\r\n    const [isDataEntered, setIsDataEntered] = useState<boolean>(true)\r\n\r\n    useEffect(() => {\r\n        const localStartValue = localStorage.getItem('startValue')\r\n        const localMaxValue = localStorage.getItem('maxValue')\r\n        if (localStartValue) {\r\n            setStartValue(JSON.parse(localStartValue))\r\n            setCounter(JSON.parse(localStartValue))\r\n        }\r\n        if (localMaxValue) setMaxValue(JSON.parse(localMaxValue))\r\n    }, [])\r\n\r\n    const changeStartValue = (value: number) => {\r\n        setStartValue(value)\r\n        value < 0 || value >= maxValue ? setDisabledBtnSet(true) : setDisabledBtnSet(false)\r\n        setdDisabledBtnsCounter(true)\r\n        setIsDataEntered(false)\r\n    }\r\n\r\n    const changeMaxValue = (value: number) => {\r\n        setMaxValue(value)\r\n        startValue < 0 || startValue >= value ? setDisabledBtnSet(true) : setDisabledBtnSet(false)\r\n        setdDisabledBtnsCounter(true)\r\n        setIsDataEntered(false)\r\n    }\r\n\r\n    const onButtonSetClick = () => {\r\n        setStartValue(startValue)\r\n        setMaxValue(maxValue)\r\n        setCounter(startValue)\r\n        setDisabledBtnSet(true)\r\n        localStorage.setItem('startValue', JSON.stringify(startValue))\r\n        localStorage.setItem('maxValue', JSON.stringify(maxValue))\r\n        setdDisabledBtnsCounter(false)\r\n        setIsDataEntered(true)\r\n    }\r\n\r\n    return (\r\n        <div className='appHeader'>\r\n            <div className='screen'>\r\n                <Counter maxValue={maxValue} startValue={startValue}\r\n                         counter={counter} setCounter={setCounter}\r\n                         disabled={disabledBtnsCounter} isDataEntered={isDataEntered}/>\r\n            </div>\r\n\r\n            <div className='screen'>\r\n                <CounterSettings maxValue={maxValue} startValue={startValue}\r\n                                 disabled={disabledBtnSet}\r\n                                 changeStartValue={changeStartValue} changeMaxValue={changeMaxValue}\r\n                                 onButtonSetClick={onButtonSetClick}/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport {App} from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()"],"sourceRoot":""}